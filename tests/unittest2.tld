{
	"module" : "unit_test_2",

	"c_includes" : [ "../../tests/dl_test_included.h" ],

	"enums" : {
		"extern_enum" : {
			"extern" : true,
			"values" : {
				"extern_value1" : 0,
				"extern_value2" : 1,
				"extern_value3" : 2,
				"extern_value4" : 3
			}
		}
	},

	"types" : {
		"BugTest1_InArray" : { "members" : [ { "name" : "u64_1", "type" : "uint64" },
											 { "name" : "u64_2", "type" : "uint64" },
											 { "name" : "u16",   "type" : "uint16" } ] },

		"BugTest1" : { "members" : [ { "name" : "Arr", "type" : "BugTest1_InArray[]" } ] },

		"BugTest2_WithMat" : {
			"members" : [
				{ "name" : "iSubModel", "type" : "uint32" },
				{ "name" : "Transform", "type" : "fp32[16]" }
			]
		},

		"BugTest2" : { "members" : [ { "name" : "Instances", "type" : "BugTest2_WithMat[]" } ] },

		// testing bug where struct first in struct with ptr in substruct will not get patched on load.
		"BugTest3_StructWithPtr" : { "members" : [ { "name" : "arr", "type" : "uint32[]" } ] },
		"BugTest3" :               { "members" : [ { "name" : "sub", "type" : "BugTest3_StructWithPtr" } ] },

		"per_bug_1" : { "members" : [ { "name" : "str", "type" : "string"      } ] },
		"per_bug"   : { "members" : [ { "name" : "arr", "type" : "per_bug_1[]" } ] },

		"bug_with_substr_2" : {
			"members" : [
				{ "name" : "str", "type" : "string" }
			]
		},
		"bug_with_substr" : {
			"members" : [
				{ "name" : "str", "type" : "string" },
				{ "name" : "sub", "type" : "bug_with_substr_2" }
			]
		},

		"vec3_test" : {
			"extern" : true,
			"members" : [
				{ "name" : "x", "type" : "fp32" },
				{ "name" : "y", "type" : "fp32" },
				{ "name" : "z", "type" : "fp32" }
			]
		},
		"no_verify_memeber_test" : {
			"extern" : true,
			"members" : [
				// members in the actual type are named a,b,c so these are marked as "verify" : false to skip
				// the verification.
				{ "name" : "x", "type" : "fp32", "verify" : false },
				{ "name" : "y", "type" : "fp32", "verify" : false },
				{ "name" : "z", "type" : "fp32", "verify" : false }
			]
		},
		"no_verify_size_align_test" : {
			"extern" : true,
			// the actual type has a member called __hidden that alter its size, this in a way to test out
			// that verification is skipped.
			"verify" : false,
			"members" : [
				{ "name" : "a", "type" : "fp32" },
				{ "name" : "b", "type" : "fp32" },
				{ "name" : "c", "type" : "fp32" }
			]
		},
		"alias_test" : {
			"members" : [
				{ "name" : "m1", "type" : "vec3_test" },
				{ "name" : "m2", "type" : "vec3_test" }
			]
		},
		"complex_member" : {
			"members" : [
				{ "name" : "dynamic_arr", "type" : "uint32[]" }
			]
		},
		"big_array_test" : {
			"members" : [
				{ "name" : "members", "type" : "complex_member[]" }
			]
		}
	}
}
